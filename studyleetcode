#leetcode 345
class Solution345:
    def reverseVowels(self, s: str) -> str:
        length=len(s)
        low,high=0,length-1
        s=list(s)
        res =['a','e','i','o','u','A','E','I','O','U']
        while low<=high:
            while low<high and s[high] not in res:
                high-=1
            while low<high and s[low] not in res:
                low+=1
            s[low],s[high]=s[high],s[low]
            low+=1
            high-=1
        return "".join(s)


#leetcode 524
class Solution524:
    def findLongestWord(self, s: str, d: List[str]) -> str:
        d.sort(key=lambda x:[-len(x),x])
        for word in d:
            a=0
            b=0
            while a<len(s) and b<len(word):
                if s[a]==word[b]:
                    a+=1
                    b+=1
                else:
                    a+=1
            if len(word) ==b:
                return word
        return ''
        
        #leetcode 141
class Solution141:
    def hasCycle(self, head: ListNode) -> bool:
        if not head:
            return head
        slow=head
        quick=head
        while quick and slow:
            slow=slow.next
            if quick.next:
                quick=quick.next.next
            else:
                return False
            if quick is slow:
                return True
        return False

